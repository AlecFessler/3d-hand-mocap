Decode with libav using nvdec, use decoder for buffering

Use a queue to align timestamps with frames exiting decoder

Handle delays in timestamp reception with a "cycle frame" mechanism

1. For sync, declare an array of atomic bools, and give each thread an index into it.
Have an atomic int in main, and a semaphore.

2. Declare an array of frame buffers and have threads use the same index for this as for their atomic bool and cam conf.

3. When main sets a threads flag, it will try to get a frame from its decoder, if none are available it will leave the flag set and continue processing frames until one is.

4. Upon a thread receiving a decoded frame, it writes to the frame buffer provided by main, resets its flag, and then increments the atomic counter with a cas, upon success, checks if it's expected equals camera count, if so it posts to the main threads semaphore to notify it all frame buffers are filled.

5. When the main loop unblocks, it checks the timestamps on the frame buffers. If they don't all match, it sets the atomic flags of any threads with timestamps smaller than the largest timestamp, and decrements the atomic counter for each one set.

6. This process is repeat until all timestamps match, at which point the frame set can be shared with a consumer process through some IPC mechanism, maybe mmap.

7. After consumer receives frame set, main loop can reset all flags simultaneously with a memset.
__________________________________________________________________

Next steps:

1. Write libav decoder package for threads to use
2. Write main and thread sync
